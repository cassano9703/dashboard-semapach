/**
 * @fileoverview Firestore Security Rules for SEMAPACH dashboard data.
 *
 * Core Philosophy:
 * This ruleset provides public read access to the `daily_collections` and `district_progress` collections,
 * but restricts write access to prevent unauthorized data modification. This is suitable
 * for a data visualization dashboard where the data is considered public information but
 * should only be modifiable through a separate, secured administrative interface (not
 * covered by these rules).
 *
 * Data Structure:
 * The data is organized into two top-level collections:
 * - /daily_collections/{dailyCollectionId}: Stores daily collection records.
 * - /district_progress/{districtProgressId}: Stores daily progress records for each district.
 *
 * Key Security Decisions:
 * - Public Read Access: Both `get` and `list` operations are allowed for all users, including
 *   unauthenticated users, on both collections. This assumes the data is non-sensitive and
 *   intended for public display.
 * - Write Restrictions: All write operations (`create`, `update`, `delete`) are explicitly denied
 *   to prevent unauthorized modifications. This ensures that only authorized processes (e.g.,
 *   a separate admin panel) can alter the data.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows public read access to daily collection data, but restricts write access.
     * @path /daily_collections/{dailyCollectionId}
     * @allow (get, list): Any user can read daily collection data.
     * @deny (create, update, delete): No user can create, update, or delete daily collection data through Firestore directly.
     * @principle Provides public read access while restricting unauthorized writes.
     */
    match /daily_collections/{dailyCollectionId} {
      allow get, list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Allows public read access to district progress data, but restricts write access.
     * @path /district_progress/{districtProgressId}
     * @allow (get, list): Any user can read district progress data.
     * @deny (create, update, delete): No user can create, update, or delete district progress data through Firestore directly.
     * @principle Provides public read access while restricting unauthorized writes.
     */
    match /district_progress/{districtProgressId} {
      allow get, list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }
  }
}