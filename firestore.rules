/**
 * @fileoverview Firestore Security Rules for SEMAPACH dashboard data.
 *
 * Core Philosophy:
 * This ruleset provides public read access to all data while restricting write access to authenticated users.
 *
 * Data Structure:
 * The database stores daily collection data and district progress in separate top-level collections.
 * - /daily_collections/{dailyCollectionId}
 * - /district_progress/{districtProgressId}
 *
 * Key Security Decisions:
 * - Public read access is granted to facilitate data visualization and reporting.
 * - Write access is restricted to authenticated users to prevent unauthorized data modification.
 * - No user-specific data exists, so the rules do not rely on user-ownership patterns.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows public read access to daily collection records. Write access is restricted to authenticated users.
     * @path /daily_collections/{dailyCollectionId}
     * @allow get, list: if true;
     * @allow create: if isSignedIn(); // Only authenticated users can create
     * @allow update: if isSignedIn() && resource != null; // Only authenticated users can update, and the document must exist
     * @allow delete: if isSignedIn() && resource != null; // Only authenticated users can delete, and the document must exist
     * @deny create: if false;
     * @deny update: if false;
     * @deny delete: if false;
     * @principle Allows public data retrieval while restricting modifications to authenticated users.
     */
    match /daily_collections/{dailyCollectionId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn() && resource != null;
      allow delete: if isSignedIn() && resource != null;
    }

    /**
     * @description Allows public read access to district progress records. Write access is restricted to authenticated users.
     * @path /district_progress/{districtProgressId}
     * @allow get, list: if true;
     * @allow create: if isSignedIn(); // Only authenticated users can create
     * @allow update: if isSignedIn() && resource != null; // Only authenticated users can update, and the document must exist
     * @allow delete: if isSignedIn() && resource != null; // Only authenticated users can delete, and the document must exist
     * @deny create: if false;
     * @deny update: if false;
     * @deny delete: if false;
     * @principle Allows public data retrieval while restricting modifications to authenticated users.
     */
    match /district_progress/{districtProgressId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn() && resource != null;
      allow delete: if isSignedIn() && resource != null;
    }

    // Helper function to determine if a user is signed in
    function isSignedIn() {
      return request.auth != null;
    }
  }
}